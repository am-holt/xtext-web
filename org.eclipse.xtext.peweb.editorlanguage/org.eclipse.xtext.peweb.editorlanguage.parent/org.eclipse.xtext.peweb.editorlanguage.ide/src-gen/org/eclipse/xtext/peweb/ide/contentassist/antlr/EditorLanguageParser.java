/*
 * generated by Xtext 2.14.0-SNAPSHOT
 */
package org.eclipse.xtext.peweb.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.peweb.ide.contentassist.antlr.internal.InternalEditorLanguageParser;
import org.eclipse.xtext.peweb.services.EditorLanguageGrammarAccess;

public class EditorLanguageParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(EditorLanguageGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, EditorLanguageGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getMainSectionAccess().getAlternatives_1(), "rule__MainSection__Alternatives_1");
			builder.put(grammarAccess.getNodeDeclarationAccess().getAlternatives_3(), "rule__NodeDeclaration__Alternatives_3");
			builder.put(grammarAccess.getProjectionDeclarationAccess().getAlternatives_5(), "rule__ProjectionDeclaration__Alternatives_5");
			builder.put(grammarAccess.getHtmlSnippetAccess().getAlternatives(), "rule__HtmlSnippet__Alternatives");
			builder.put(grammarAccess.getHtmlAnnotationAccess().getAlternatives(), "rule__HtmlAnnotation__Alternatives");
			builder.put(grammarAccess.getJsSnippetAccess().getAlternatives(), "rule__JsSnippet__Alternatives");
			builder.put(grammarAccess.getEditorDefinitionFileAccess().getGroup(), "rule__EditorDefinitionFile__Group__0");
			builder.put(grammarAccess.getImportSectionAccess().getGroup(), "rule__ImportSection__Group__0");
			builder.put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group__0");
			builder.put(grammarAccess.getQualifiedNameAccess().getGroup(), "rule__QualifiedName__Group__0");
			builder.put(grammarAccess.getQualifiedNameAccess().getGroup_1(), "rule__QualifiedName__Group_1__0");
			builder.put(grammarAccess.getMainSectionAccess().getGroup(), "rule__MainSection__Group__0");
			builder.put(grammarAccess.getNodeDeclarationAccess().getGroup(), "rule__NodeDeclaration__Group__0");
			builder.put(grammarAccess.getProjectionDeclarationAccess().getGroup(), "rule__ProjectionDeclaration__Group__0");
			builder.put(grammarAccess.getAttributeDeclarationAccess().getGroup(), "rule__AttributeDeclaration__Group__0");
			builder.put(grammarAccess.getComponentIdAccess().getGroup(), "rule__ComponentId__Group__0");
			builder.put(grammarAccess.getComponentIdAccess().getGroup_2(), "rule__ComponentId__Group_2__0");
			builder.put(grammarAccess.getAttributeControllerAccess().getGroup(), "rule__AttributeController__Group__0");
			builder.put(grammarAccess.getChildIdAccess().getGroup(), "rule__ChildId__Group__0");
			builder.put(grammarAccess.getTagIdAccess().getGroup(), "rule__TagId__Group__0");
			builder.put(grammarAccess.getComponentDeclarationAccess().getGroup(), "rule__ComponentDeclaration__Group__0");
			builder.put(grammarAccess.getComponentControllerAccess().getGroup(), "rule__ComponentController__Group__0");
			builder.put(grammarAccess.getComponentControllerAccess().getGroup_3(), "rule__ComponentController__Group_3__0");
			builder.put(grammarAccess.getHtmlSnippetAccess().getGroup_0(), "rule__HtmlSnippet__Group_0__0");
			builder.put(grammarAccess.getHtmlSnippetAccess().getGroup_1(), "rule__HtmlSnippet__Group_1__0");
			builder.put(grammarAccess.getHtmlSnippetAccess().getGroup_1_2(), "rule__HtmlSnippet__Group_1_2__0");
			builder.put(grammarAccess.getJsSnippetAccess().getGroup_0(), "rule__JsSnippet__Group_0__0");
			builder.put(grammarAccess.getJsSnippetAccess().getGroup_1(), "rule__JsSnippet__Group_1__0");
			builder.put(grammarAccess.getJsSnippetAccess().getGroup_1_2(), "rule__JsSnippet__Group_1_2__0");
			builder.put(grammarAccess.getEditorDefinitionFileAccess().getImportsAssignment_0(), "rule__EditorDefinitionFile__ImportsAssignment_0");
			builder.put(grammarAccess.getEditorDefinitionFileAccess().getMainSectionAssignment_1(), "rule__EditorDefinitionFile__MainSectionAssignment_1");
			builder.put(grammarAccess.getImportSectionAccess().getImportsAssignment_1(), "rule__ImportSection__ImportsAssignment_1");
			builder.put(grammarAccess.getImportAccess().getNameAssignment_1(), "rule__Import__NameAssignment_1");
			builder.put(grammarAccess.getMainSectionAccess().getNodesAssignment_1_0(), "rule__MainSection__NodesAssignment_1_0");
			builder.put(grammarAccess.getMainSectionAccess().getComponentsAssignment_1_1(), "rule__MainSection__ComponentsAssignment_1_1");
			builder.put(grammarAccess.getNodeDeclarationAccess().getNodeNameAssignment_1(), "rule__NodeDeclaration__NodeNameAssignment_1");
			builder.put(grammarAccess.getNodeDeclarationAccess().getProjectionsAssignment_3_0(), "rule__NodeDeclaration__ProjectionsAssignment_3_0");
			builder.put(grammarAccess.getNodeDeclarationAccess().getComponentsAssignment_3_1(), "rule__NodeDeclaration__ComponentsAssignment_3_1");
			builder.put(grammarAccess.getProjectionDeclarationAccess().getNameAssignment_1(), "rule__ProjectionDeclaration__NameAssignment_1");
			builder.put(grammarAccess.getProjectionDeclarationAccess().getViewAssignment_4(), "rule__ProjectionDeclaration__ViewAssignment_4");
			builder.put(grammarAccess.getProjectionDeclarationAccess().getAttributesAssignment_5_0(), "rule__ProjectionDeclaration__AttributesAssignment_5_0");
			builder.put(grammarAccess.getProjectionDeclarationAccess().getComponentsAssignment_5_1(), "rule__ProjectionDeclaration__ComponentsAssignment_5_1");
			builder.put(grammarAccess.getAttributeDeclarationAccess().getAttributeNameAssignment_1(), "rule__AttributeDeclaration__AttributeNameAssignment_1");
			builder.put(grammarAccess.getAttributeDeclarationAccess().getControllerAssignment_2(), "rule__AttributeDeclaration__ControllerAssignment_2");
			builder.put(grammarAccess.getComponentIdAccess().getComponentTypeAssignment_1(), "rule__ComponentId__ComponentTypeAssignment_1");
			builder.put(grammarAccess.getComponentIdAccess().getComponentIdAssignment_2_1(), "rule__ComponentId__ComponentIdAssignment_2_1");
			builder.put(grammarAccess.getAttributeControllerAccess().getGetterAssignment_2(), "rule__AttributeController__GetterAssignment_2");
			builder.put(grammarAccess.getAttributeControllerAccess().getSetterAssignment_4(), "rule__AttributeController__SetterAssignment_4");
			builder.put(grammarAccess.getAttributeControllerAccess().getValidaterAssignment_6(), "rule__AttributeController__ValidaterAssignment_6");
			builder.put(grammarAccess.getChildIdAccess().getChildIdAssignment_1(), "rule__ChildId__ChildIdAssignment_1");
			builder.put(grammarAccess.getChildIdAccess().getProjectionIdAssignment_3(), "rule__ChildId__ProjectionIdAssignment_3");
			builder.put(grammarAccess.getTagIdAccess().getTagNameAssignment_1(), "rule__TagId__TagNameAssignment_1");
			builder.put(grammarAccess.getComponentDeclarationAccess().getNameAssignment_1(), "rule__ComponentDeclaration__NameAssignment_1");
			builder.put(grammarAccess.getComponentDeclarationAccess().getControlAssignment_3(), "rule__ComponentDeclaration__ControlAssignment_3");
			builder.put(grammarAccess.getComponentControllerAccess().getViewAssignment_2(), "rule__ComponentController__ViewAssignment_2");
			builder.put(grammarAccess.getComponentControllerAccess().getGetterAssignment_3_1(), "rule__ComponentController__GetterAssignment_3_1");
			builder.put(grammarAccess.getComponentControllerAccess().getSetterAssignment_3_3(), "rule__ComponentController__SetterAssignment_3_3");
			builder.put(grammarAccess.getComponentControllerAccess().getValidaterAssignment_3_5(), "rule__ComponentController__ValidaterAssignment_3_5");
			builder.put(grammarAccess.getHtmlSnippetAccess().getHtmlAssignment_0_1(), "rule__HtmlSnippet__HtmlAssignment_0_1");
			builder.put(grammarAccess.getHtmlSnippetAccess().getHtmlAssignment_1_0(), "rule__HtmlSnippet__HtmlAssignment_1_0");
			builder.put(grammarAccess.getHtmlSnippetAccess().getHtmlAssignment_1_1(), "rule__HtmlSnippet__HtmlAssignment_1_1");
			builder.put(grammarAccess.getHtmlSnippetAccess().getHtmlAssignment_1_2_0(), "rule__HtmlSnippet__HtmlAssignment_1_2_0");
			builder.put(grammarAccess.getHtmlSnippetAccess().getHtmlAssignment_1_2_1(), "rule__HtmlSnippet__HtmlAssignment_1_2_1");
			builder.put(grammarAccess.getHtmlSnippetAccess().getHtmlAssignment_1_3(), "rule__HtmlSnippet__HtmlAssignment_1_3");
			builder.put(grammarAccess.getCodeLiteralAccess().getValueAssignment(), "rule__CodeLiteral__ValueAssignment");
			builder.put(grammarAccess.getCodeLiteralStartAccess().getValueAssignment(), "rule__CodeLiteralStart__ValueAssignment");
			builder.put(grammarAccess.getCodeLiteralMidAccess().getValueAssignment(), "rule__CodeLiteralMid__ValueAssignment");
			builder.put(grammarAccess.getCodeLiteralEndAccess().getValueAssignment(), "rule__CodeLiteralEnd__ValueAssignment");
			builder.put(grammarAccess.getJsSnippetAccess().getJsAssignment_0_1(), "rule__JsSnippet__JsAssignment_0_1");
			builder.put(grammarAccess.getJsSnippetAccess().getJsAssignment_1_0(), "rule__JsSnippet__JsAssignment_1_0");
			builder.put(grammarAccess.getJsSnippetAccess().getJsAssignment_1_1(), "rule__JsSnippet__JsAssignment_1_1");
			builder.put(grammarAccess.getJsSnippetAccess().getJsAssignment_1_2_0(), "rule__JsSnippet__JsAssignment_1_2_0");
			builder.put(grammarAccess.getJsSnippetAccess().getJsAssignment_1_2_1(), "rule__JsSnippet__JsAssignment_1_2_1");
			builder.put(grammarAccess.getJsSnippetAccess().getJsAssignment_1_3(), "rule__JsSnippet__JsAssignment_1_3");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private EditorLanguageGrammarAccess grammarAccess;

	@Override
	protected InternalEditorLanguageParser createParser() {
		InternalEditorLanguageParser result = new InternalEditorLanguageParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public EditorLanguageGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(EditorLanguageGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
