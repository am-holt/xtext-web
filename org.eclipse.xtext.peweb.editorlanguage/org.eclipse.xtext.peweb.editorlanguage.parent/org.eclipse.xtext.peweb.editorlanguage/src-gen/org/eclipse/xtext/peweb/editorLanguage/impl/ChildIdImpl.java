/**
 * generated by Xtext 2.14.0-SNAPSHOT
 */
package org.eclipse.xtext.peweb.editorLanguage.impl;

import org.eclipse.emf.common.notify.Notification;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;

import org.eclipse.xtext.peweb.editorLanguage.ChildId;
import org.eclipse.xtext.peweb.editorLanguage.EditorLanguagePackage;
import org.eclipse.xtext.peweb.editorLanguage.ProjectionDeclaration;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Child Id</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.eclipse.xtext.peweb.editorLanguage.impl.ChildIdImpl#getChildId <em>Child Id</em>}</li>
 *   <li>{@link org.eclipse.xtext.peweb.editorLanguage.impl.ChildIdImpl#getProjectionId <em>Projection Id</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ChildIdImpl extends HtmlAnnotationImpl implements ChildId
{
  /**
   * The default value of the '{@link #getChildId() <em>Child Id</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getChildId()
   * @generated
   * @ordered
   */
  protected static final String CHILD_ID_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getChildId() <em>Child Id</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getChildId()
   * @generated
   * @ordered
   */
  protected String childId = CHILD_ID_EDEFAULT;

  /**
   * The cached value of the '{@link #getProjectionId() <em>Projection Id</em>}' reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProjectionId()
   * @generated
   * @ordered
   */
  protected ProjectionDeclaration projectionId;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ChildIdImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return EditorLanguagePackage.Literals.CHILD_ID;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getChildId()
  {
    return childId;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setChildId(String newChildId)
  {
    String oldChildId = childId;
    childId = newChildId;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, EditorLanguagePackage.CHILD_ID__CHILD_ID, oldChildId, childId));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ProjectionDeclaration getProjectionId()
  {
    if (projectionId != null && projectionId.eIsProxy())
    {
      InternalEObject oldProjectionId = (InternalEObject)projectionId;
      projectionId = (ProjectionDeclaration)eResolveProxy(oldProjectionId);
      if (projectionId != oldProjectionId)
      {
        if (eNotificationRequired())
          eNotify(new ENotificationImpl(this, Notification.RESOLVE, EditorLanguagePackage.CHILD_ID__PROJECTION_ID, oldProjectionId, projectionId));
      }
    }
    return projectionId;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ProjectionDeclaration basicGetProjectionId()
  {
    return projectionId;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setProjectionId(ProjectionDeclaration newProjectionId)
  {
    ProjectionDeclaration oldProjectionId = projectionId;
    projectionId = newProjectionId;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, EditorLanguagePackage.CHILD_ID__PROJECTION_ID, oldProjectionId, projectionId));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case EditorLanguagePackage.CHILD_ID__CHILD_ID:
        return getChildId();
      case EditorLanguagePackage.CHILD_ID__PROJECTION_ID:
        if (resolve) return getProjectionId();
        return basicGetProjectionId();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case EditorLanguagePackage.CHILD_ID__CHILD_ID:
        setChildId((String)newValue);
        return;
      case EditorLanguagePackage.CHILD_ID__PROJECTION_ID:
        setProjectionId((ProjectionDeclaration)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case EditorLanguagePackage.CHILD_ID__CHILD_ID:
        setChildId(CHILD_ID_EDEFAULT);
        return;
      case EditorLanguagePackage.CHILD_ID__PROJECTION_ID:
        setProjectionId((ProjectionDeclaration)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case EditorLanguagePackage.CHILD_ID__CHILD_ID:
        return CHILD_ID_EDEFAULT == null ? childId != null : !CHILD_ID_EDEFAULT.equals(childId);
      case EditorLanguagePackage.CHILD_ID__PROJECTION_ID:
        return projectionId != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (childId: ");
    result.append(childId);
    result.append(')');
    return result.toString();
  }

} //ChildIdImpl
