/**
 * generated by Xtext 2.14.0-SNAPSHOT
 */
package org.eclipse.xtext.peweb.editorLanguage.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.eclipse.xtext.peweb.editorLanguage.ComponentDeclaration;
import org.eclipse.xtext.peweb.editorLanguage.EditorLanguagePackage;
import org.eclipse.xtext.peweb.editorLanguage.NodeDeclaration;
import org.eclipse.xtext.peweb.editorLanguage.ProjectionDeclaration;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Node Declaration</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.eclipse.xtext.peweb.editorLanguage.impl.NodeDeclarationImpl#getNodeName <em>Node Name</em>}</li>
 *   <li>{@link org.eclipse.xtext.peweb.editorLanguage.impl.NodeDeclarationImpl#getProjections <em>Projections</em>}</li>
 *   <li>{@link org.eclipse.xtext.peweb.editorLanguage.impl.NodeDeclarationImpl#getComponents <em>Components</em>}</li>
 * </ul>
 *
 * @generated
 */
public class NodeDeclarationImpl extends MinimalEObjectImpl.Container implements NodeDeclaration
{
  /**
   * The default value of the '{@link #getNodeName() <em>Node Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNodeName()
   * @generated
   * @ordered
   */
  protected static final String NODE_NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getNodeName() <em>Node Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getNodeName()
   * @generated
   * @ordered
   */
  protected String nodeName = NODE_NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getProjections() <em>Projections</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getProjections()
   * @generated
   * @ordered
   */
  protected EList<ProjectionDeclaration> projections;

  /**
   * The cached value of the '{@link #getComponents() <em>Components</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getComponents()
   * @generated
   * @ordered
   */
  protected EList<ComponentDeclaration> components;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected NodeDeclarationImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return EditorLanguagePackage.Literals.NODE_DECLARATION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getNodeName()
  {
    return nodeName;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setNodeName(String newNodeName)
  {
    String oldNodeName = nodeName;
    nodeName = newNodeName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, EditorLanguagePackage.NODE_DECLARATION__NODE_NAME, oldNodeName, nodeName));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<ProjectionDeclaration> getProjections()
  {
    if (projections == null)
    {
      projections = new EObjectContainmentEList<ProjectionDeclaration>(ProjectionDeclaration.class, this, EditorLanguagePackage.NODE_DECLARATION__PROJECTIONS);
    }
    return projections;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<ComponentDeclaration> getComponents()
  {
    if (components == null)
    {
      components = new EObjectContainmentEList<ComponentDeclaration>(ComponentDeclaration.class, this, EditorLanguagePackage.NODE_DECLARATION__COMPONENTS);
    }
    return components;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case EditorLanguagePackage.NODE_DECLARATION__PROJECTIONS:
        return ((InternalEList<?>)getProjections()).basicRemove(otherEnd, msgs);
      case EditorLanguagePackage.NODE_DECLARATION__COMPONENTS:
        return ((InternalEList<?>)getComponents()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case EditorLanguagePackage.NODE_DECLARATION__NODE_NAME:
        return getNodeName();
      case EditorLanguagePackage.NODE_DECLARATION__PROJECTIONS:
        return getProjections();
      case EditorLanguagePackage.NODE_DECLARATION__COMPONENTS:
        return getComponents();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case EditorLanguagePackage.NODE_DECLARATION__NODE_NAME:
        setNodeName((String)newValue);
        return;
      case EditorLanguagePackage.NODE_DECLARATION__PROJECTIONS:
        getProjections().clear();
        getProjections().addAll((Collection<? extends ProjectionDeclaration>)newValue);
        return;
      case EditorLanguagePackage.NODE_DECLARATION__COMPONENTS:
        getComponents().clear();
        getComponents().addAll((Collection<? extends ComponentDeclaration>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case EditorLanguagePackage.NODE_DECLARATION__NODE_NAME:
        setNodeName(NODE_NAME_EDEFAULT);
        return;
      case EditorLanguagePackage.NODE_DECLARATION__PROJECTIONS:
        getProjections().clear();
        return;
      case EditorLanguagePackage.NODE_DECLARATION__COMPONENTS:
        getComponents().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case EditorLanguagePackage.NODE_DECLARATION__NODE_NAME:
        return NODE_NAME_EDEFAULT == null ? nodeName != null : !NODE_NAME_EDEFAULT.equals(nodeName);
      case EditorLanguagePackage.NODE_DECLARATION__PROJECTIONS:
        return projections != null && !projections.isEmpty();
      case EditorLanguagePackage.NODE_DECLARATION__COMPONENTS:
        return components != null && !components.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (nodeName: ");
    result.append(nodeName);
    result.append(')');
    return result.toString();
  }

} //NodeDeclarationImpl
