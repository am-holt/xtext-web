/**
 * generated by Xtext 2.14.0-SNAPSHOT
 */
package org.eclipse.xtext.peweb.editorLanguage.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import org.eclipse.xtext.peweb.editorLanguage.AttributeDeclaration;
import org.eclipse.xtext.peweb.editorLanguage.ComponentDeclaration;
import org.eclipse.xtext.peweb.editorLanguage.EditorLanguagePackage;
import org.eclipse.xtext.peweb.editorLanguage.HtmlSnippet;
import org.eclipse.xtext.peweb.editorLanguage.ProjectionDeclaration;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Projection Declaration</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.eclipse.xtext.peweb.editorLanguage.impl.ProjectionDeclarationImpl#getName <em>Name</em>}</li>
 *   <li>{@link org.eclipse.xtext.peweb.editorLanguage.impl.ProjectionDeclarationImpl#getView <em>View</em>}</li>
 *   <li>{@link org.eclipse.xtext.peweb.editorLanguage.impl.ProjectionDeclarationImpl#getAttributes <em>Attributes</em>}</li>
 *   <li>{@link org.eclipse.xtext.peweb.editorLanguage.impl.ProjectionDeclarationImpl#getComponents <em>Components</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ProjectionDeclarationImpl extends MinimalEObjectImpl.Container implements ProjectionDeclaration
{
  /**
   * The default value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected static final String NAME_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getName() <em>Name</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getName()
   * @generated
   * @ordered
   */
  protected String name = NAME_EDEFAULT;

  /**
   * The cached value of the '{@link #getView() <em>View</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getView()
   * @generated
   * @ordered
   */
  protected HtmlSnippet view;

  /**
   * The cached value of the '{@link #getAttributes() <em>Attributes</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getAttributes()
   * @generated
   * @ordered
   */
  protected EList<AttributeDeclaration> attributes;

  /**
   * The cached value of the '{@link #getComponents() <em>Components</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getComponents()
   * @generated
   * @ordered
   */
  protected EList<ComponentDeclaration> components;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ProjectionDeclarationImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return EditorLanguagePackage.Literals.PROJECTION_DECLARATION;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String getName()
  {
    return name;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setName(String newName)
  {
    String oldName = name;
    name = newName;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, EditorLanguagePackage.PROJECTION_DECLARATION__NAME, oldName, name));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public HtmlSnippet getView()
  {
    return view;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetView(HtmlSnippet newView, NotificationChain msgs)
  {
    HtmlSnippet oldView = view;
    view = newView;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, EditorLanguagePackage.PROJECTION_DECLARATION__VIEW, oldView, newView);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setView(HtmlSnippet newView)
  {
    if (newView != view)
    {
      NotificationChain msgs = null;
      if (view != null)
        msgs = ((InternalEObject)view).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - EditorLanguagePackage.PROJECTION_DECLARATION__VIEW, null, msgs);
      if (newView != null)
        msgs = ((InternalEObject)newView).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - EditorLanguagePackage.PROJECTION_DECLARATION__VIEW, null, msgs);
      msgs = basicSetView(newView, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, EditorLanguagePackage.PROJECTION_DECLARATION__VIEW, newView, newView));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<AttributeDeclaration> getAttributes()
  {
    if (attributes == null)
    {
      attributes = new EObjectContainmentEList<AttributeDeclaration>(AttributeDeclaration.class, this, EditorLanguagePackage.PROJECTION_DECLARATION__ATTRIBUTES);
    }
    return attributes;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<ComponentDeclaration> getComponents()
  {
    if (components == null)
    {
      components = new EObjectContainmentEList<ComponentDeclaration>(ComponentDeclaration.class, this, EditorLanguagePackage.PROJECTION_DECLARATION__COMPONENTS);
    }
    return components;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case EditorLanguagePackage.PROJECTION_DECLARATION__VIEW:
        return basicSetView(null, msgs);
      case EditorLanguagePackage.PROJECTION_DECLARATION__ATTRIBUTES:
        return ((InternalEList<?>)getAttributes()).basicRemove(otherEnd, msgs);
      case EditorLanguagePackage.PROJECTION_DECLARATION__COMPONENTS:
        return ((InternalEList<?>)getComponents()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case EditorLanguagePackage.PROJECTION_DECLARATION__NAME:
        return getName();
      case EditorLanguagePackage.PROJECTION_DECLARATION__VIEW:
        return getView();
      case EditorLanguagePackage.PROJECTION_DECLARATION__ATTRIBUTES:
        return getAttributes();
      case EditorLanguagePackage.PROJECTION_DECLARATION__COMPONENTS:
        return getComponents();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case EditorLanguagePackage.PROJECTION_DECLARATION__NAME:
        setName((String)newValue);
        return;
      case EditorLanguagePackage.PROJECTION_DECLARATION__VIEW:
        setView((HtmlSnippet)newValue);
        return;
      case EditorLanguagePackage.PROJECTION_DECLARATION__ATTRIBUTES:
        getAttributes().clear();
        getAttributes().addAll((Collection<? extends AttributeDeclaration>)newValue);
        return;
      case EditorLanguagePackage.PROJECTION_DECLARATION__COMPONENTS:
        getComponents().clear();
        getComponents().addAll((Collection<? extends ComponentDeclaration>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case EditorLanguagePackage.PROJECTION_DECLARATION__NAME:
        setName(NAME_EDEFAULT);
        return;
      case EditorLanguagePackage.PROJECTION_DECLARATION__VIEW:
        setView((HtmlSnippet)null);
        return;
      case EditorLanguagePackage.PROJECTION_DECLARATION__ATTRIBUTES:
        getAttributes().clear();
        return;
      case EditorLanguagePackage.PROJECTION_DECLARATION__COMPONENTS:
        getComponents().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case EditorLanguagePackage.PROJECTION_DECLARATION__NAME:
        return NAME_EDEFAULT == null ? name != null : !NAME_EDEFAULT.equals(name);
      case EditorLanguagePackage.PROJECTION_DECLARATION__VIEW:
        return view != null;
      case EditorLanguagePackage.PROJECTION_DECLARATION__ATTRIBUTES:
        return attributes != null && !attributes.isEmpty();
      case EditorLanguagePackage.PROJECTION_DECLARATION__COMPONENTS:
        return components != null && !components.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (name: ");
    result.append(name);
    result.append(')');
    return result.toString();
  }

} //ProjectionDeclarationImpl
