/*
 * generated by Xtext 2.14.0-SNAPSHOT
 */
package ox.xtext.projectionalEditor.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class EditorLanguageGrammarAccess extends AbstractGrammarElementFinder {
	
	public class EditorDefinitionFileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ox.xtext.projectionalEditor.EditorLanguage.EditorDefinitionFile");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cImportsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cImportsImportSectionParserRuleCall_0_0 = (RuleCall)cImportsAssignment_0.eContents().get(0);
		private final Assignment cMainSectionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cMainSectionMainSectionParserRuleCall_1_0 = (RuleCall)cMainSectionAssignment_1.eContents().get(0);
		
		//EditorDefinitionFile:
		//	imports=ImportSection?
		//	mainSection=MainSection;
		@Override public ParserRule getRule() { return rule; }
		
		//imports=ImportSection? mainSection=MainSection
		public Group getGroup() { return cGroup; }
		
		//imports=ImportSection?
		public Assignment getImportsAssignment_0() { return cImportsAssignment_0; }
		
		//ImportSection
		public RuleCall getImportsImportSectionParserRuleCall_0_0() { return cImportsImportSectionParserRuleCall_0_0; }
		
		//mainSection=MainSection
		public Assignment getMainSectionAssignment_1() { return cMainSectionAssignment_1; }
		
		//MainSection
		public RuleCall getMainSectionMainSectionParserRuleCall_1_0() { return cMainSectionMainSectionParserRuleCall_1_0; }
	}
	public class ImportSectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ox.xtext.projectionalEditor.EditorLanguage.ImportSection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cImportSectionAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cImportsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cImportsImportParserRuleCall_1_0 = (RuleCall)cImportsAssignment_1.eContents().get(0);
		
		//ImportSection:
		//	{ImportSection} imports+=Import+;
		@Override public ParserRule getRule() { return rule; }
		
		//{ImportSection} imports+=Import+
		public Group getGroup() { return cGroup; }
		
		//{ImportSection}
		public Action getImportSectionAction_0() { return cImportSectionAction_0; }
		
		//imports+=Import+
		public Assignment getImportsAssignment_1() { return cImportsAssignment_1; }
		
		//Import
		public RuleCall getImportsImportParserRuleCall_1_0() { return cImportsImportParserRuleCall_1_0; }
	}
	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ox.xtext.projectionalEditor.EditorLanguage.Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameQualifiedNameParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Import:
		//	'import' name=QualifiedName;
		@Override public ParserRule getRule() { return rule; }
		
		//'import' name=QualifiedName
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//name=QualifiedName
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//QualifiedName
		public RuleCall getNameQualifiedNameParserRuleCall_1_0() { return cNameQualifiedNameParserRuleCall_1_0; }
	}
	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ox.xtext.projectionalEditor.EditorLanguage.QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ('.' ID)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ID ('.' ID)*
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('.' ID)*
		public Group getGroup_1() { return cGroup_1; }
		
		//'.'
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}
	public class MainSectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ox.xtext.projectionalEditor.EditorLanguage.MainSection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cMainSectionAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cNodesAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cNodesNodeDeclarationParserRuleCall_1_0_0 = (RuleCall)cNodesAssignment_1_0.eContents().get(0);
		private final Assignment cComponentsAssignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cComponentsComponentDeclarationParserRuleCall_1_1_0 = (RuleCall)cComponentsAssignment_1_1.eContents().get(0);
		
		//MainSection:
		//	{MainSection} (nodes+=NodeDeclaration | components+=ComponentDeclaration)*;
		@Override public ParserRule getRule() { return rule; }
		
		//{MainSection} (nodes+=NodeDeclaration | components+=ComponentDeclaration)*
		public Group getGroup() { return cGroup; }
		
		//{MainSection}
		public Action getMainSectionAction_0() { return cMainSectionAction_0; }
		
		//(nodes+=NodeDeclaration | components+=ComponentDeclaration)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//nodes+=NodeDeclaration
		public Assignment getNodesAssignment_1_0() { return cNodesAssignment_1_0; }
		
		//NodeDeclaration
		public RuleCall getNodesNodeDeclarationParserRuleCall_1_0_0() { return cNodesNodeDeclarationParserRuleCall_1_0_0; }
		
		//components+=ComponentDeclaration
		public Assignment getComponentsAssignment_1_1() { return cComponentsAssignment_1_1; }
		
		//ComponentDeclaration
		public RuleCall getComponentsComponentDeclarationParserRuleCall_1_1_0() { return cComponentsComponentDeclarationParserRuleCall_1_1_0; }
	}
	public class NodeDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ox.xtext.projectionalEditor.EditorLanguage.NodeDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNodeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNodeNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNodeNameIDTerminalRuleCall_1_0 = (RuleCall)cNodeNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cProjectionsAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cProjectionsProjectionDeclarationParserRuleCall_3_0_0 = (RuleCall)cProjectionsAssignment_3_0.eContents().get(0);
		private final Assignment cComponentsAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cComponentsComponentDeclarationParserRuleCall_3_1_0 = (RuleCall)cComponentsAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//NodeDeclaration:
		//	'Node' nodeName=ID '{' (projections+=ProjectionDeclaration | components+=ComponentDeclaration)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Node' nodeName=ID '{' (projections+=ProjectionDeclaration | components+=ComponentDeclaration)* '}'
		public Group getGroup() { return cGroup; }
		
		//'Node'
		public Keyword getNodeKeyword_0() { return cNodeKeyword_0; }
		
		//nodeName=ID
		public Assignment getNodeNameAssignment_1() { return cNodeNameAssignment_1; }
		
		//ID
		public RuleCall getNodeNameIDTerminalRuleCall_1_0() { return cNodeNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(projections+=ProjectionDeclaration | components+=ComponentDeclaration)*
		public Alternatives getAlternatives_3() { return cAlternatives_3; }
		
		//projections+=ProjectionDeclaration
		public Assignment getProjectionsAssignment_3_0() { return cProjectionsAssignment_3_0; }
		
		//ProjectionDeclaration
		public RuleCall getProjectionsProjectionDeclarationParserRuleCall_3_0_0() { return cProjectionsProjectionDeclarationParserRuleCall_3_0_0; }
		
		//components+=ComponentDeclaration
		public Assignment getComponentsAssignment_3_1() { return cComponentsAssignment_3_1; }
		
		//ComponentDeclaration
		public RuleCall getComponentsComponentDeclarationParserRuleCall_3_1_0() { return cComponentsComponentDeclarationParserRuleCall_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class ProjectionDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ox.xtext.projectionalEditor.EditorLanguage.ProjectionDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cProjectionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cViewKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cViewAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cViewHtmlSnippetParserRuleCall_4_0 = (RuleCall)cViewAssignment_4.eContents().get(0);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Assignment cAttributesAssignment_5_0 = (Assignment)cAlternatives_5.eContents().get(0);
		private final RuleCall cAttributesAttributeDeclarationParserRuleCall_5_0_0 = (RuleCall)cAttributesAssignment_5_0.eContents().get(0);
		private final Assignment cComponentsAssignment_5_1 = (Assignment)cAlternatives_5.eContents().get(1);
		private final RuleCall cComponentsComponentDeclarationParserRuleCall_5_1_0 = (RuleCall)cComponentsAssignment_5_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//ProjectionDeclaration:
		//	'Projection' name=ID '{'
		//	'view:' view=HtmlSnippet (attributes+=AttributeDeclaration | components+=ComponentDeclaration)*
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Projection' name=ID '{' 'view:' view=HtmlSnippet (attributes+=AttributeDeclaration | components+=ComponentDeclaration)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'Projection'
		public Keyword getProjectionKeyword_0() { return cProjectionKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'view:'
		public Keyword getViewKeyword_3() { return cViewKeyword_3; }
		
		//view=HtmlSnippet
		public Assignment getViewAssignment_4() { return cViewAssignment_4; }
		
		//HtmlSnippet
		public RuleCall getViewHtmlSnippetParserRuleCall_4_0() { return cViewHtmlSnippetParserRuleCall_4_0; }
		
		//(attributes+=AttributeDeclaration | components+=ComponentDeclaration)*
		public Alternatives getAlternatives_5() { return cAlternatives_5; }
		
		//attributes+=AttributeDeclaration
		public Assignment getAttributesAssignment_5_0() { return cAttributesAssignment_5_0; }
		
		//AttributeDeclaration
		public RuleCall getAttributesAttributeDeclarationParserRuleCall_5_0_0() { return cAttributesAttributeDeclarationParserRuleCall_5_0_0; }
		
		//components+=ComponentDeclaration
		public Assignment getComponentsAssignment_5_1() { return cComponentsAssignment_5_1; }
		
		//ComponentDeclaration
		public RuleCall getComponentsComponentDeclarationParserRuleCall_5_1_0() { return cComponentsComponentDeclarationParserRuleCall_5_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class AttributeDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ox.xtext.projectionalEditor.EditorLanguage.AttributeDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCommercialAtKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAttributeNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAttributeNameIDTerminalRuleCall_1_0 = (RuleCall)cAttributeNameAssignment_1.eContents().get(0);
		private final Assignment cControllerAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cControllerAttributeControllerParserRuleCall_2_0 = (RuleCall)cControllerAssignment_2.eContents().get(0);
		
		//AttributeDeclaration:
		//	'@' attributeName=ID controller=AttributeController;
		@Override public ParserRule getRule() { return rule; }
		
		//'@' attributeName=ID controller=AttributeController
		public Group getGroup() { return cGroup; }
		
		//'@'
		public Keyword getCommercialAtKeyword_0() { return cCommercialAtKeyword_0; }
		
		//attributeName=ID
		public Assignment getAttributeNameAssignment_1() { return cAttributeNameAssignment_1; }
		
		//ID
		public RuleCall getAttributeNameIDTerminalRuleCall_1_0() { return cAttributeNameIDTerminalRuleCall_1_0; }
		
		//controller=AttributeController
		public Assignment getControllerAssignment_2() { return cControllerAssignment_2; }
		
		//AttributeController
		public RuleCall getControllerAttributeControllerParserRuleCall_2_0() { return cControllerAttributeControllerParserRuleCall_2_0; }
	}
	public class ComponentIdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ox.xtext.projectionalEditor.EditorLanguage.ComponentId");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPercentSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cComponentTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cComponentTypeComponentDeclarationCrossReference_1_0 = (CrossReference)cComponentTypeAssignment_1.eContents().get(0);
		private final RuleCall cComponentTypeComponentDeclarationIDTerminalRuleCall_1_0_1 = (RuleCall)cComponentTypeComponentDeclarationCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cComponentIdAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cComponentIdIDTerminalRuleCall_2_1_0 = (RuleCall)cComponentIdAssignment_2_1.eContents().get(0);
		private final Keyword cPercentSignKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//ComponentId:
		//	'%' componentType=[ComponentDeclaration] (':' componentId=ID)? '%';
		@Override public ParserRule getRule() { return rule; }
		
		//'%' componentType=[ComponentDeclaration] (':' componentId=ID)? '%'
		public Group getGroup() { return cGroup; }
		
		//'%'
		public Keyword getPercentSignKeyword_0() { return cPercentSignKeyword_0; }
		
		//componentType=[ComponentDeclaration]
		public Assignment getComponentTypeAssignment_1() { return cComponentTypeAssignment_1; }
		
		//[ComponentDeclaration]
		public CrossReference getComponentTypeComponentDeclarationCrossReference_1_0() { return cComponentTypeComponentDeclarationCrossReference_1_0; }
		
		//ID
		public RuleCall getComponentTypeComponentDeclarationIDTerminalRuleCall_1_0_1() { return cComponentTypeComponentDeclarationIDTerminalRuleCall_1_0_1; }
		
		//(':' componentId=ID)?
		public Group getGroup_2() { return cGroup_2; }
		
		//':'
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }
		
		//componentId=ID
		public Assignment getComponentIdAssignment_2_1() { return cComponentIdAssignment_2_1; }
		
		//ID
		public RuleCall getComponentIdIDTerminalRuleCall_2_1_0() { return cComponentIdIDTerminalRuleCall_2_1_0; }
		
		//'%'
		public Keyword getPercentSignKeyword_3() { return cPercentSignKeyword_3; }
	}
	public class AttributeControllerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ox.xtext.projectionalEditor.EditorLanguage.AttributeController");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cGetKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cGetterAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cGetterJsSnippetParserRuleCall_2_0 = (RuleCall)cGetterAssignment_2.eContents().get(0);
		private final Keyword cSetKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSetterAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cSetterJsSnippetParserRuleCall_4_0 = (RuleCall)cSetterAssignment_4.eContents().get(0);
		private final Keyword cValidateKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cValidaterAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cValidaterJsSnippetParserRuleCall_6_0 = (RuleCall)cValidaterAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//AttributeController:
		//	'{'
		//	'get:' getter=JsSnippet
		//	'set:' setter=JsSnippet
		//	'validate:' validater=JsSnippet
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' 'get:' getter=JsSnippet 'set:' setter=JsSnippet 'validate:' validater=JsSnippet '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//'get:'
		public Keyword getGetKeyword_1() { return cGetKeyword_1; }
		
		//getter=JsSnippet
		public Assignment getGetterAssignment_2() { return cGetterAssignment_2; }
		
		//JsSnippet
		public RuleCall getGetterJsSnippetParserRuleCall_2_0() { return cGetterJsSnippetParserRuleCall_2_0; }
		
		//'set:'
		public Keyword getSetKeyword_3() { return cSetKeyword_3; }
		
		//setter=JsSnippet
		public Assignment getSetterAssignment_4() { return cSetterAssignment_4; }
		
		//JsSnippet
		public RuleCall getSetterJsSnippetParserRuleCall_4_0() { return cSetterJsSnippetParserRuleCall_4_0; }
		
		//'validate:'
		public Keyword getValidateKeyword_5() { return cValidateKeyword_5; }
		
		//validater=JsSnippet
		public Assignment getValidaterAssignment_6() { return cValidaterAssignment_6; }
		
		//JsSnippet
		public RuleCall getValidaterJsSnippetParserRuleCall_6_0() { return cValidaterJsSnippetParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class ChildIdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ox.xtext.projectionalEditor.EditorLanguage.ChildId");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cChildIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cChildIdIDTerminalRuleCall_1_0 = (RuleCall)cChildIdAssignment_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cProjectionIdAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cProjectionIdProjectionDeclarationCrossReference_3_0 = (CrossReference)cProjectionIdAssignment_3.eContents().get(0);
		private final RuleCall cProjectionIdProjectionDeclarationIDTerminalRuleCall_3_0_1 = (RuleCall)cProjectionIdProjectionDeclarationCrossReference_3_0.eContents().get(1);
		private final Keyword cExclamationMarkKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ChildId:
		//	'!' childId=ID ':' projectionId=[ProjectionDeclaration] '!';
		@Override public ParserRule getRule() { return rule; }
		
		//'!' childId=ID ':' projectionId=[ProjectionDeclaration] '!'
		public Group getGroup() { return cGroup; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_0() { return cExclamationMarkKeyword_0; }
		
		//childId=ID
		public Assignment getChildIdAssignment_1() { return cChildIdAssignment_1; }
		
		//ID
		public RuleCall getChildIdIDTerminalRuleCall_1_0() { return cChildIdIDTerminalRuleCall_1_0; }
		
		//':'
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }
		
		//projectionId=[ProjectionDeclaration]
		public Assignment getProjectionIdAssignment_3() { return cProjectionIdAssignment_3; }
		
		//[ProjectionDeclaration]
		public CrossReference getProjectionIdProjectionDeclarationCrossReference_3_0() { return cProjectionIdProjectionDeclarationCrossReference_3_0; }
		
		//ID
		public RuleCall getProjectionIdProjectionDeclarationIDTerminalRuleCall_3_0_1() { return cProjectionIdProjectionDeclarationIDTerminalRuleCall_3_0_1; }
		
		//'!'
		public Keyword getExclamationMarkKeyword_4() { return cExclamationMarkKeyword_4; }
	}
	public class TagIdElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ox.xtext.projectionalEditor.EditorLanguage.TagId");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDollarSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cTagNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTagNameIDTerminalRuleCall_1_0 = (RuleCall)cTagNameAssignment_1.eContents().get(0);
		private final Keyword cDollarSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//TagId:
		//	'$' tagName=ID '$';
		@Override public ParserRule getRule() { return rule; }
		
		//'$' tagName=ID '$'
		public Group getGroup() { return cGroup; }
		
		//'$'
		public Keyword getDollarSignKeyword_0() { return cDollarSignKeyword_0; }
		
		//tagName=ID
		public Assignment getTagNameAssignment_1() { return cTagNameAssignment_1; }
		
		//ID
		public RuleCall getTagNameIDTerminalRuleCall_1_0() { return cTagNameIDTerminalRuleCall_1_0; }
		
		//'$'
		public Keyword getDollarSignKeyword_2() { return cDollarSignKeyword_2; }
	}
	public class ComponentDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ox.xtext.projectionalEditor.EditorLanguage.ComponentDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPercentSignKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cPercentSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cControlAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cControlComponentControllerParserRuleCall_3_0 = (RuleCall)cControlAssignment_3.eContents().get(0);
		
		//ComponentDeclaration:
		//	'%' name=ID '%' control=ComponentController?;
		@Override public ParserRule getRule() { return rule; }
		
		//'%' name=ID '%' control=ComponentController?
		public Group getGroup() { return cGroup; }
		
		//'%'
		public Keyword getPercentSignKeyword_0() { return cPercentSignKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'%'
		public Keyword getPercentSignKeyword_2() { return cPercentSignKeyword_2; }
		
		//control=ComponentController?
		public Assignment getControlAssignment_3() { return cControlAssignment_3; }
		
		//ComponentController
		public RuleCall getControlComponentControllerParserRuleCall_3_0() { return cControlComponentControllerParserRuleCall_3_0; }
	}
	public class ComponentControllerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ox.xtext.projectionalEditor.EditorLanguage.ComponentController");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cViewKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cViewAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cViewHtmlSnippetParserRuleCall_2_0 = (RuleCall)cViewAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cGetKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cGetterAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cGetterJsSnippetParserRuleCall_3_1_0 = (RuleCall)cGetterAssignment_3_1.eContents().get(0);
		private final Keyword cSetKeyword_3_2 = (Keyword)cGroup_3.eContents().get(2);
		private final Assignment cSetterAssignment_3_3 = (Assignment)cGroup_3.eContents().get(3);
		private final RuleCall cSetterJsSnippetParserRuleCall_3_3_0 = (RuleCall)cSetterAssignment_3_3.eContents().get(0);
		private final Keyword cValidateKeyword_3_4 = (Keyword)cGroup_3.eContents().get(4);
		private final Assignment cValidaterAssignment_3_5 = (Assignment)cGroup_3.eContents().get(5);
		private final RuleCall cValidaterJsSnippetParserRuleCall_3_5_0 = (RuleCall)cValidaterAssignment_3_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ComponentController:
		//	'{'
		//	'view:' view=HtmlSnippet ('get:' getter=JsSnippet
		//	'set:' setter=JsSnippet
		//	'validate:' validater=JsSnippet)?
		//	'}';
		@Override public ParserRule getRule() { return rule; }
		
		//'{' 'view:' view=HtmlSnippet ('get:' getter=JsSnippet 'set:' setter=JsSnippet 'validate:' validater=JsSnippet)? '}'
		public Group getGroup() { return cGroup; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }
		
		//'view:'
		public Keyword getViewKeyword_1() { return cViewKeyword_1; }
		
		//view=HtmlSnippet
		public Assignment getViewAssignment_2() { return cViewAssignment_2; }
		
		//HtmlSnippet
		public RuleCall getViewHtmlSnippetParserRuleCall_2_0() { return cViewHtmlSnippetParserRuleCall_2_0; }
		
		//('get:' getter=JsSnippet 'set:' setter=JsSnippet 'validate:' validater=JsSnippet)?
		public Group getGroup_3() { return cGroup_3; }
		
		//'get:'
		public Keyword getGetKeyword_3_0() { return cGetKeyword_3_0; }
		
		//getter=JsSnippet
		public Assignment getGetterAssignment_3_1() { return cGetterAssignment_3_1; }
		
		//JsSnippet
		public RuleCall getGetterJsSnippetParserRuleCall_3_1_0() { return cGetterJsSnippetParserRuleCall_3_1_0; }
		
		//'set:'
		public Keyword getSetKeyword_3_2() { return cSetKeyword_3_2; }
		
		//setter=JsSnippet
		public Assignment getSetterAssignment_3_3() { return cSetterAssignment_3_3; }
		
		//JsSnippet
		public RuleCall getSetterJsSnippetParserRuleCall_3_3_0() { return cSetterJsSnippetParserRuleCall_3_3_0; }
		
		//'validate:'
		public Keyword getValidateKeyword_3_4() { return cValidateKeyword_3_4; }
		
		//validater=JsSnippet
		public Assignment getValidaterAssignment_3_5() { return cValidaterAssignment_3_5; }
		
		//JsSnippet
		public RuleCall getValidaterJsSnippetParserRuleCall_3_5_0() { return cValidaterJsSnippetParserRuleCall_3_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class HtmlSnippetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ox.xtext.projectionalEditor.EditorLanguage.HtmlSnippet");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cHtmlSnippetAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cHtmlAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cHtmlCodeLiteralParserRuleCall_0_1_0 = (RuleCall)cHtmlAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cHtmlAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cHtmlCodeLiteralStartParserRuleCall_1_0_0 = (RuleCall)cHtmlAssignment_1_0.eContents().get(0);
		private final Assignment cHtmlAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cHtmlHtmlAnnotationParserRuleCall_1_1_0 = (RuleCall)cHtmlAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Assignment cHtmlAssignment_1_2_0 = (Assignment)cGroup_1_2.eContents().get(0);
		private final RuleCall cHtmlCodeLiteralMidParserRuleCall_1_2_0_0 = (RuleCall)cHtmlAssignment_1_2_0.eContents().get(0);
		private final Assignment cHtmlAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cHtmlHtmlAnnotationParserRuleCall_1_2_1_0 = (RuleCall)cHtmlAssignment_1_2_1.eContents().get(0);
		private final Assignment cHtmlAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cHtmlCodeLiteralEndParserRuleCall_1_3_0 = (RuleCall)cHtmlAssignment_1_3.eContents().get(0);
		
		//HtmlSnippet:
		//	{HtmlSnippet} html+=CodeLiteral | html+=CodeLiteralStart html+=HtmlAnnotation (html+=CodeLiteralMid
		//	html+=HtmlAnnotation)* html+=CodeLiteralEnd;
		@Override public ParserRule getRule() { return rule; }
		
		//{HtmlSnippet} html+=CodeLiteral | html+=CodeLiteralStart html+=HtmlAnnotation (html+=CodeLiteralMid
		//html+=HtmlAnnotation)* html+=CodeLiteralEnd
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{HtmlSnippet} html+=CodeLiteral
		public Group getGroup_0() { return cGroup_0; }
		
		//{HtmlSnippet}
		public Action getHtmlSnippetAction_0_0() { return cHtmlSnippetAction_0_0; }
		
		//html+=CodeLiteral
		public Assignment getHtmlAssignment_0_1() { return cHtmlAssignment_0_1; }
		
		//CodeLiteral
		public RuleCall getHtmlCodeLiteralParserRuleCall_0_1_0() { return cHtmlCodeLiteralParserRuleCall_0_1_0; }
		
		//html+=CodeLiteralStart html+=HtmlAnnotation (html+=CodeLiteralMid html+=HtmlAnnotation)* html+=CodeLiteralEnd
		public Group getGroup_1() { return cGroup_1; }
		
		//html+=CodeLiteralStart
		public Assignment getHtmlAssignment_1_0() { return cHtmlAssignment_1_0; }
		
		//CodeLiteralStart
		public RuleCall getHtmlCodeLiteralStartParserRuleCall_1_0_0() { return cHtmlCodeLiteralStartParserRuleCall_1_0_0; }
		
		//html+=HtmlAnnotation
		public Assignment getHtmlAssignment_1_1() { return cHtmlAssignment_1_1; }
		
		//HtmlAnnotation
		public RuleCall getHtmlHtmlAnnotationParserRuleCall_1_1_0() { return cHtmlHtmlAnnotationParserRuleCall_1_1_0; }
		
		//(html+=CodeLiteralMid html+=HtmlAnnotation)*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//html+=CodeLiteralMid
		public Assignment getHtmlAssignment_1_2_0() { return cHtmlAssignment_1_2_0; }
		
		//CodeLiteralMid
		public RuleCall getHtmlCodeLiteralMidParserRuleCall_1_2_0_0() { return cHtmlCodeLiteralMidParserRuleCall_1_2_0_0; }
		
		//html+=HtmlAnnotation
		public Assignment getHtmlAssignment_1_2_1() { return cHtmlAssignment_1_2_1; }
		
		//HtmlAnnotation
		public RuleCall getHtmlHtmlAnnotationParserRuleCall_1_2_1_0() { return cHtmlHtmlAnnotationParserRuleCall_1_2_1_0; }
		
		//html+=CodeLiteralEnd
		public Assignment getHtmlAssignment_1_3() { return cHtmlAssignment_1_3; }
		
		//CodeLiteralEnd
		public RuleCall getHtmlCodeLiteralEndParserRuleCall_1_3_0() { return cHtmlCodeLiteralEndParserRuleCall_1_3_0; }
	}
	public class HtmlAnnotationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ox.xtext.projectionalEditor.EditorLanguage.HtmlAnnotation");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTagIdParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cChildIdParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cComponentIdParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//HtmlAnnotation:
		//	TagId | ChildId | ComponentId;
		@Override public ParserRule getRule() { return rule; }
		
		//TagId | ChildId | ComponentId
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//TagId
		public RuleCall getTagIdParserRuleCall_0() { return cTagIdParserRuleCall_0; }
		
		//ChildId
		public RuleCall getChildIdParserRuleCall_1() { return cChildIdParserRuleCall_1; }
		
		//ComponentId
		public RuleCall getComponentIdParserRuleCall_2() { return cComponentIdParserRuleCall_2; }
	}
	public class CodeLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ox.xtext.projectionalEditor.EditorLanguage.CodeLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueCODENOTAGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//CodeLiteral:
		//	value=CODENOTAG;
		@Override public ParserRule getRule() { return rule; }
		
		//value=CODENOTAG
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//CODENOTAG
		public RuleCall getValueCODENOTAGTerminalRuleCall_0() { return cValueCODENOTAGTerminalRuleCall_0; }
	}
	public class CodeLiteralStartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ox.xtext.projectionalEditor.EditorLanguage.CodeLiteralStart");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueCODESTARTTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//CodeLiteralStart:
		//	value=CODESTART;
		@Override public ParserRule getRule() { return rule; }
		
		//value=CODESTART
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//CODESTART
		public RuleCall getValueCODESTARTTerminalRuleCall_0() { return cValueCODESTARTTerminalRuleCall_0; }
	}
	public class CodeLiteralMidElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ox.xtext.projectionalEditor.EditorLanguage.CodeLiteralMid");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueCODEMIDTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//CodeLiteralMid:
		//	value=CODEMID;
		@Override public ParserRule getRule() { return rule; }
		
		//value=CODEMID
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//CODEMID
		public RuleCall getValueCODEMIDTerminalRuleCall_0() { return cValueCODEMIDTerminalRuleCall_0; }
	}
	public class CodeLiteralEndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ox.xtext.projectionalEditor.EditorLanguage.CodeLiteralEnd");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueCODEENDTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//CodeLiteralEnd:
		//	value=CODEEND;
		@Override public ParserRule getRule() { return rule; }
		
		//value=CODEEND
		public Assignment getValueAssignment() { return cValueAssignment; }
		
		//CODEEND
		public RuleCall getValueCODEENDTerminalRuleCall_0() { return cValueCODEENDTerminalRuleCall_0; }
	}
	public class JsSnippetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ox.xtext.projectionalEditor.EditorLanguage.JsSnippet");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Action cJsSnippetAction_0_0 = (Action)cGroup_0.eContents().get(0);
		private final Assignment cJsAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cJsCodeLiteralParserRuleCall_0_1_0 = (RuleCall)cJsAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cJsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cJsCodeLiteralStartParserRuleCall_1_0_0 = (RuleCall)cJsAssignment_1_0.eContents().get(0);
		private final Assignment cJsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cJsJsExtraTagParserRuleCall_1_1_0 = (RuleCall)cJsAssignment_1_1.eContents().get(0);
		private final Group cGroup_1_2 = (Group)cGroup_1.eContents().get(2);
		private final Assignment cJsAssignment_1_2_0 = (Assignment)cGroup_1_2.eContents().get(0);
		private final RuleCall cJsCodeLiteralMidParserRuleCall_1_2_0_0 = (RuleCall)cJsAssignment_1_2_0.eContents().get(0);
		private final Assignment cJsAssignment_1_2_1 = (Assignment)cGroup_1_2.eContents().get(1);
		private final RuleCall cJsJsExtraTagParserRuleCall_1_2_1_0 = (RuleCall)cJsAssignment_1_2_1.eContents().get(0);
		private final Assignment cJsAssignment_1_3 = (Assignment)cGroup_1.eContents().get(3);
		private final RuleCall cJsCodeLiteralEndParserRuleCall_1_3_0 = (RuleCall)cJsAssignment_1_3.eContents().get(0);
		
		//JsSnippet:
		//	{JsSnippet} js+=CodeLiteral | js+=CodeLiteralStart js+=JsExtraTag (js+=CodeLiteralMid js+=JsExtraTag)*
		//	js+=CodeLiteralEnd;
		@Override public ParserRule getRule() { return rule; }
		
		//{JsSnippet} js+=CodeLiteral | js+=CodeLiteralStart js+=JsExtraTag (js+=CodeLiteralMid js+=JsExtraTag)*
		//js+=CodeLiteralEnd
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//{JsSnippet} js+=CodeLiteral
		public Group getGroup_0() { return cGroup_0; }
		
		//{JsSnippet}
		public Action getJsSnippetAction_0_0() { return cJsSnippetAction_0_0; }
		
		//js+=CodeLiteral
		public Assignment getJsAssignment_0_1() { return cJsAssignment_0_1; }
		
		//CodeLiteral
		public RuleCall getJsCodeLiteralParserRuleCall_0_1_0() { return cJsCodeLiteralParserRuleCall_0_1_0; }
		
		//js+=CodeLiteralStart js+=JsExtraTag (js+=CodeLiteralMid js+=JsExtraTag)* js+=CodeLiteralEnd
		public Group getGroup_1() { return cGroup_1; }
		
		//js+=CodeLiteralStart
		public Assignment getJsAssignment_1_0() { return cJsAssignment_1_0; }
		
		//CodeLiteralStart
		public RuleCall getJsCodeLiteralStartParserRuleCall_1_0_0() { return cJsCodeLiteralStartParserRuleCall_1_0_0; }
		
		//js+=JsExtraTag
		public Assignment getJsAssignment_1_1() { return cJsAssignment_1_1; }
		
		//JsExtraTag
		public RuleCall getJsJsExtraTagParserRuleCall_1_1_0() { return cJsJsExtraTagParserRuleCall_1_1_0; }
		
		//(js+=CodeLiteralMid js+=JsExtraTag)*
		public Group getGroup_1_2() { return cGroup_1_2; }
		
		//js+=CodeLiteralMid
		public Assignment getJsAssignment_1_2_0() { return cJsAssignment_1_2_0; }
		
		//CodeLiteralMid
		public RuleCall getJsCodeLiteralMidParserRuleCall_1_2_0_0() { return cJsCodeLiteralMidParserRuleCall_1_2_0_0; }
		
		//js+=JsExtraTag
		public Assignment getJsAssignment_1_2_1() { return cJsAssignment_1_2_1; }
		
		//JsExtraTag
		public RuleCall getJsJsExtraTagParserRuleCall_1_2_1_0() { return cJsJsExtraTagParserRuleCall_1_2_1_0; }
		
		//js+=CodeLiteralEnd
		public Assignment getJsAssignment_1_3() { return cJsAssignment_1_3; }
		
		//CodeLiteralEnd
		public RuleCall getJsCodeLiteralEndParserRuleCall_1_3_0() { return cJsCodeLiteralEndParserRuleCall_1_3_0; }
	}
	public class JsExtraTagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ox.xtext.projectionalEditor.EditorLanguage.JsExtraTag");
		private final RuleCall cTagIdParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//JsExtraTag:
		//	TagId;
		@Override public ParserRule getRule() { return rule; }
		
		//TagId
		public RuleCall getTagIdParserRuleCall() { return cTagIdParserRuleCall; }
	}
	
	
	private final EditorDefinitionFileElements pEditorDefinitionFile;
	private final ImportSectionElements pImportSection;
	private final ImportElements pImport;
	private final QualifiedNameElements pQualifiedName;
	private final MainSectionElements pMainSection;
	private final NodeDeclarationElements pNodeDeclaration;
	private final ProjectionDeclarationElements pProjectionDeclaration;
	private final AttributeDeclarationElements pAttributeDeclaration;
	private final ComponentIdElements pComponentId;
	private final AttributeControllerElements pAttributeController;
	private final ChildIdElements pChildId;
	private final TagIdElements pTagId;
	private final ComponentDeclarationElements pComponentDeclaration;
	private final ComponentControllerElements pComponentController;
	private final HtmlSnippetElements pHtmlSnippet;
	private final HtmlAnnotationElements pHtmlAnnotation;
	private final CodeLiteralElements pCodeLiteral;
	private final CodeLiteralStartElements pCodeLiteralStart;
	private final CodeLiteralMidElements pCodeLiteralMid;
	private final CodeLiteralEndElements pCodeLiteralEnd;
	private final JsSnippetElements pJsSnippet;
	private final JsExtraTagElements pJsExtraTag;
	private final TerminalRule tCODENOTAG;
	private final TerminalRule tCODESTART;
	private final TerminalRule tCODEMID;
	private final TerminalRule tCODEEND;
	private final TerminalRule tID;
	private final TerminalRule tINT;
	private final TerminalRule tML_COMMENT;
	private final TerminalRule tSL_COMMENT;
	private final TerminalRule tWS;
	private final TerminalRule tANY_OTHER;
	
	private final Grammar grammar;

	@Inject
	public EditorLanguageGrammarAccess(GrammarProvider grammarProvider) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.pEditorDefinitionFile = new EditorDefinitionFileElements();
		this.pImportSection = new ImportSectionElements();
		this.pImport = new ImportElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pMainSection = new MainSectionElements();
		this.pNodeDeclaration = new NodeDeclarationElements();
		this.pProjectionDeclaration = new ProjectionDeclarationElements();
		this.pAttributeDeclaration = new AttributeDeclarationElements();
		this.pComponentId = new ComponentIdElements();
		this.pAttributeController = new AttributeControllerElements();
		this.pChildId = new ChildIdElements();
		this.pTagId = new TagIdElements();
		this.pComponentDeclaration = new ComponentDeclarationElements();
		this.pComponentController = new ComponentControllerElements();
		this.pHtmlSnippet = new HtmlSnippetElements();
		this.pHtmlAnnotation = new HtmlAnnotationElements();
		this.pCodeLiteral = new CodeLiteralElements();
		this.pCodeLiteralStart = new CodeLiteralStartElements();
		this.pCodeLiteralMid = new CodeLiteralMidElements();
		this.pCodeLiteralEnd = new CodeLiteralEndElements();
		this.pJsSnippet = new JsSnippetElements();
		this.pJsExtraTag = new JsExtraTagElements();
		this.tCODENOTAG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ox.xtext.projectionalEditor.EditorLanguage.CODENOTAG");
		this.tCODESTART = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ox.xtext.projectionalEditor.EditorLanguage.CODESTART");
		this.tCODEMID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ox.xtext.projectionalEditor.EditorLanguage.CODEMID");
		this.tCODEEND = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ox.xtext.projectionalEditor.EditorLanguage.CODEEND");
		this.tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ox.xtext.projectionalEditor.EditorLanguage.ID");
		this.tINT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ox.xtext.projectionalEditor.EditorLanguage.INT");
		this.tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ox.xtext.projectionalEditor.EditorLanguage.ML_COMMENT");
		this.tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ox.xtext.projectionalEditor.EditorLanguage.SL_COMMENT");
		this.tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ox.xtext.projectionalEditor.EditorLanguage.WS");
		this.tANY_OTHER = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ox.xtext.projectionalEditor.EditorLanguage.ANY_OTHER");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("ox.xtext.projectionalEditor.EditorLanguage".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	
	//EditorDefinitionFile:
	//	imports=ImportSection?
	//	mainSection=MainSection;
	public EditorDefinitionFileElements getEditorDefinitionFileAccess() {
		return pEditorDefinitionFile;
	}
	
	public ParserRule getEditorDefinitionFileRule() {
		return getEditorDefinitionFileAccess().getRule();
	}
	
	//ImportSection:
	//	{ImportSection} imports+=Import+;
	public ImportSectionElements getImportSectionAccess() {
		return pImportSection;
	}
	
	public ParserRule getImportSectionRule() {
		return getImportSectionAccess().getRule();
	}
	
	//Import:
	//	'import' name=QualifiedName;
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}
	
	//QualifiedName:
	//	ID ('.' ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}
	
	//MainSection:
	//	{MainSection} (nodes+=NodeDeclaration | components+=ComponentDeclaration)*;
	public MainSectionElements getMainSectionAccess() {
		return pMainSection;
	}
	
	public ParserRule getMainSectionRule() {
		return getMainSectionAccess().getRule();
	}
	
	//NodeDeclaration:
	//	'Node' nodeName=ID '{' (projections+=ProjectionDeclaration | components+=ComponentDeclaration)*
	//	'}';
	public NodeDeclarationElements getNodeDeclarationAccess() {
		return pNodeDeclaration;
	}
	
	public ParserRule getNodeDeclarationRule() {
		return getNodeDeclarationAccess().getRule();
	}
	
	//ProjectionDeclaration:
	//	'Projection' name=ID '{'
	//	'view:' view=HtmlSnippet (attributes+=AttributeDeclaration | components+=ComponentDeclaration)*
	//	'}';
	public ProjectionDeclarationElements getProjectionDeclarationAccess() {
		return pProjectionDeclaration;
	}
	
	public ParserRule getProjectionDeclarationRule() {
		return getProjectionDeclarationAccess().getRule();
	}
	
	//AttributeDeclaration:
	//	'@' attributeName=ID controller=AttributeController;
	public AttributeDeclarationElements getAttributeDeclarationAccess() {
		return pAttributeDeclaration;
	}
	
	public ParserRule getAttributeDeclarationRule() {
		return getAttributeDeclarationAccess().getRule();
	}
	
	//ComponentId:
	//	'%' componentType=[ComponentDeclaration] (':' componentId=ID)? '%';
	public ComponentIdElements getComponentIdAccess() {
		return pComponentId;
	}
	
	public ParserRule getComponentIdRule() {
		return getComponentIdAccess().getRule();
	}
	
	//AttributeController:
	//	'{'
	//	'get:' getter=JsSnippet
	//	'set:' setter=JsSnippet
	//	'validate:' validater=JsSnippet
	//	'}';
	public AttributeControllerElements getAttributeControllerAccess() {
		return pAttributeController;
	}
	
	public ParserRule getAttributeControllerRule() {
		return getAttributeControllerAccess().getRule();
	}
	
	//ChildId:
	//	'!' childId=ID ':' projectionId=[ProjectionDeclaration] '!';
	public ChildIdElements getChildIdAccess() {
		return pChildId;
	}
	
	public ParserRule getChildIdRule() {
		return getChildIdAccess().getRule();
	}
	
	//TagId:
	//	'$' tagName=ID '$';
	public TagIdElements getTagIdAccess() {
		return pTagId;
	}
	
	public ParserRule getTagIdRule() {
		return getTagIdAccess().getRule();
	}
	
	//ComponentDeclaration:
	//	'%' name=ID '%' control=ComponentController?;
	public ComponentDeclarationElements getComponentDeclarationAccess() {
		return pComponentDeclaration;
	}
	
	public ParserRule getComponentDeclarationRule() {
		return getComponentDeclarationAccess().getRule();
	}
	
	//ComponentController:
	//	'{'
	//	'view:' view=HtmlSnippet ('get:' getter=JsSnippet
	//	'set:' setter=JsSnippet
	//	'validate:' validater=JsSnippet)?
	//	'}';
	public ComponentControllerElements getComponentControllerAccess() {
		return pComponentController;
	}
	
	public ParserRule getComponentControllerRule() {
		return getComponentControllerAccess().getRule();
	}
	
	//HtmlSnippet:
	//	{HtmlSnippet} html+=CodeLiteral | html+=CodeLiteralStart html+=HtmlAnnotation (html+=CodeLiteralMid
	//	html+=HtmlAnnotation)* html+=CodeLiteralEnd;
	public HtmlSnippetElements getHtmlSnippetAccess() {
		return pHtmlSnippet;
	}
	
	public ParserRule getHtmlSnippetRule() {
		return getHtmlSnippetAccess().getRule();
	}
	
	//HtmlAnnotation:
	//	TagId | ChildId | ComponentId;
	public HtmlAnnotationElements getHtmlAnnotationAccess() {
		return pHtmlAnnotation;
	}
	
	public ParserRule getHtmlAnnotationRule() {
		return getHtmlAnnotationAccess().getRule();
	}
	
	//CodeLiteral:
	//	value=CODENOTAG;
	public CodeLiteralElements getCodeLiteralAccess() {
		return pCodeLiteral;
	}
	
	public ParserRule getCodeLiteralRule() {
		return getCodeLiteralAccess().getRule();
	}
	
	//CodeLiteralStart:
	//	value=CODESTART;
	public CodeLiteralStartElements getCodeLiteralStartAccess() {
		return pCodeLiteralStart;
	}
	
	public ParserRule getCodeLiteralStartRule() {
		return getCodeLiteralStartAccess().getRule();
	}
	
	//CodeLiteralMid:
	//	value=CODEMID;
	public CodeLiteralMidElements getCodeLiteralMidAccess() {
		return pCodeLiteralMid;
	}
	
	public ParserRule getCodeLiteralMidRule() {
		return getCodeLiteralMidAccess().getRule();
	}
	
	//CodeLiteralEnd:
	//	value=CODEEND;
	public CodeLiteralEndElements getCodeLiteralEndAccess() {
		return pCodeLiteralEnd;
	}
	
	public ParserRule getCodeLiteralEndRule() {
		return getCodeLiteralEndAccess().getRule();
	}
	
	//JsSnippet:
	//	{JsSnippet} js+=CodeLiteral | js+=CodeLiteralStart js+=JsExtraTag (js+=CodeLiteralMid js+=JsExtraTag)*
	//	js+=CodeLiteralEnd;
	public JsSnippetElements getJsSnippetAccess() {
		return pJsSnippet;
	}
	
	public ParserRule getJsSnippetRule() {
		return getJsSnippetAccess().getRule();
	}
	
	//JsExtraTag:
	//	TagId;
	public JsExtraTagElements getJsExtraTagAccess() {
		return pJsExtraTag;
	}
	
	public ParserRule getJsExtraTagRule() {
		return getJsExtraTagAccess().getRule();
	}
	
	//terminal CODENOTAG:
	//	'[' (('\\[' | '\\]') | ("<" !("<" | '[' | ']') | ">" !(">" | '[' | ']')) | !("<" | '[' | ']' | ">"))* ("<" | ">")?
	//	']';
	public TerminalRule getCODENOTAGRule() {
		return tCODENOTAG;
	}
	
	//terminal CODESTART:
	//	'[' (('\\[' | '\\]') | ("<" !("<" | '[' | ']') | ">" !(">" | '[' | ']')) | !("<" | '[' | ']' | ">"))* ">"? '<<';
	public TerminalRule getCODESTARTRule() {
		return tCODESTART;
	}
	
	//terminal CODEMID:
	//	'>>' (('\\[' | '\\]') | ("<" !("<" | '[' | ']') | ">" !(">" | '[' | ']')) | !("<" | '[' | ']' | ">"))* ">"? '<<';
	public TerminalRule getCODEMIDRule() {
		return tCODEMID;
	}
	
	//terminal CODEEND:
	//	'>>' (('\\[' | '\\]') | ("<" !("<" | '[' | ']') | ">" !(">" | '[' | ']')) | !("<" | '[' | ']' | ">"))* ("<" | ">")?
	//	']';
	public TerminalRule getCODEENDRule() {
		return tCODEEND;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return tID;
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return tINT;
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return tML_COMMENT;
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return tSL_COMMENT;
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return tWS;
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return tANY_OTHER;
	}
}
